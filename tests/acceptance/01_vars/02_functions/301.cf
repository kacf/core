#######################################################
#
# Test dirname()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}


bundle agent init
{
  vars:
      "dummy" string => "dummy";
}

#######################################################

bundle agent test
{
  meta:
      "test_suppress_fail" string => "windows",
        meta => { "redmine4716" };


  vars:
      "tp[root]" string => "/";
      "td[root]" string => "/";

      "tp[simple]" string => "/foo/bar";
      "td[simple]" string => "/foo";

      "tp[slash]" string => "/foo/bar/";
      "td[slash]" string => "/foo";

      "tp[sub]" string => "/foo";
      "td[sub]" string => "/";

      "tp[subslash]" string => "/foo/";
      "td[subslash]" string => "/";

      "tp[multi]" string => "/foo/bar/baz";
      "td[multi]" string => "/foo/bar";

      "tp[multislash]" string => "/foo/bar/baz/";
      "td[multislash]" string => "/foo/bar";

      "tp[more]" string => "/a/b/c/d/e/f/g/h/i";
      "td[more]" string => "/a/b/c/d/e/f/g/h";

      "template_keys" slist => getindices("tp");

    windows::
      "tp[full_root]" string => "C:/";
      "td[full_root]" string => "C:/";

      "tp[full_root_file]" string => "C:/foo";
      "td[full_root_file]" string => "C:/";

      "tp[full_root_file_subslash]" string => "C:/foo/";
      "td[full_root_file_subslash]" string => "C:/";

      "tp[full_file]" string => "C:/foo/bar";
      "td[full_file]" string => "C:/foo";

      "tp[full_file_subslash]" string => "C:/foo/bar/";
      "td[full_file_subslash]" string => "C:/foo";

      "tp[drive]" string => "C:";
      "td[drive]" string => "C:";

      "tp[dir]" string => "C:foo";
      "td[dir]" string => "C:";

      "tp[two_dirs]" string => "C:foo/bar";
      "td[two_dirs]" string => "C:foo";

      "tp[dir_subslash]" string => "C:foo/";
      "td[dir_subslash]" string => "C:";

      "tp[two_dirs_subslash]" string => "C:foo/bar/";
      "td[two_dirs_subslash]" string => "C:foo";


      "p[unix_$(template_keys)]" string => "$(tp[$(template_keys)])";
      "p[native_$(template_keys)]" string => translatepath("$(tp[$(template_keys)])");
      "d[unix_$(template_keys)]" string => "$(td[$(template_keys)])";
      "d[native_$(template_keys)]" string => translatepath("$(td[$(template_keys)])");
    !windows::
      "p[native_$(template_keys)]" string => "$(tp[$(template_keys)])";
      "d[native_$(template_keys)]" string => "$(td[$(template_keys)])";

    any::
      "keys" slist => getindices("p");

      "b[$(keys)]" string => dirname("$(p[$(keys)])");
}

#######################################################

bundle agent check
{
  vars:
      "keys" slist => { @(test.keys) };

  classes:
      "failed_cmp_$(keys)" not => strcmp(dirname("$(test.p[$(keys)])"), "$(test.d[$(keys)])");
      "ok" not => classmatch("failed_cmp_.*");

  reports:
    DEBUG::
      "'dirname($(test.p[$(keys)]))' = '$(test.b[$(keys)])' != '$(test.d[$(keys)])'"
        ifvarclass => "failed_cmp_$(keys)";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}


