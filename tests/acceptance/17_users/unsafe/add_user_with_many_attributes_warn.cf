#######################################################
#
# Test warning about adding a user with many attributes.
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
}

#######################################################

bundle agent init
{
  # Remove him first, should he already be present.
  users:
    "johndoe"
      policy => "absent";
}

#######################################################

bundle agent test
{
  vars:
    "desc_string" string => "This description should make the CFEngine test pass";

  users:
    "johndoe"
      action => test_action,
      policy => "present",
      uid => "9876",
      # "2" is "bin" on most systems.
      group_primary => "2",
      groups_secondary => { "sys" },
      password => test_password,
      shell => "$(G.echo)",
      description => "$(desc_string)";
}

body action test_action
{
  action_policy => "warn";
}

body password test_password
{
  format => "hash";
  data => "$1$vUsR5eoG$cci6C2jKvoYNuyjL5macS1";
}

#######################################################

bundle agent check
{
  classes:
    "passwd_ok" expression => strcmp("0", countlinesmatching("johndoe:.*", "/etc/passwd"));
    "group_ok" expression => strcmp("0", countlinesmatching(".*johndoe.*", "/etc/group"));
    "shadow_ok" expression => strcmp("0", countlinesmatching("johndoe:.*", "/etc/shadow"));
    "ok" and => { "passwd_ok", "group_ok", "shadow_ok" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
