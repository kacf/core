#######################################################
#
# Test adding a user with several secondary groups.
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
}

#######################################################

body perms init_perms_body_bin
{
  groups => { "bin" };
  mode => "664";
}

body perms init_perms_body_sys
{
  groups => { "sys" };
  mode => "664";
}

bundle agent init
{
  # Remove him first, should he already be present.
  users:
    "johndoe"
      policy => "absent";

  files:
    "$(G.testfile)"
      create => "true",
      perms => init_perms_body_bin;
    "$(G.testfile).2"
      create => "true",
      perms => init_perms_body_sys;
}

#######################################################

body contain test_contain_body
{
  useshell => "useshell";
  exec_owner => "johndoe";
}

bundle agent test
{
  users:
    "johndoe"
      policy => "present",
      gid_secondary => { getgid("bin"), getgid("sys") };

  commands:
    "$(G.echo) Pass > $(G.testfile)"
      contain => test_contain_body;
    "$(G.echo) Pass > $(G.testfile).2"
      contain => test_contain_body;
}

#######################################################

bundle agent check
{
  classes:
    "ok" and => { !strcmp("0", countlinesmatching("Pass", "$(G.testfile)")),
                  !strcmp("0", countlinesmatching("Pass", "$(G.testfile).2"))
                };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
